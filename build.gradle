buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
        springCloudVersion = 'Edgware.SR2'
        dockerPluginVersion = '1.2'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:${dockerPluginVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'docker'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'com.pda'

jar {
    baseName = 'security-client-sample-service'
    version = 'latest'
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
//  compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')

    compile('org.springframework.cloud:spring-cloud-starter-oauth2')

    compile('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')
    compile('org.springframework.cloud:spring-cloud-starter-openfeign')

//    hystrix and turbine
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    compile('org.springframework.cloud:spring-cloud-netflix-hystrix-stream')
    compile('org.springframework.cloud:spring-cloud-starter-stream-rabbit')

//    sleuth and zipkin
    compile('org.springframework.cloud:spring-cloud-starter-sleuth')
    compile('org.springframework.cloud:spring-cloud-sleuth-stream')
    compile('org.springframework.cloud:spring-cloud-starter-stream-rabbit')
//    compile "io.dropwizard.metrics:metrics-core"
//    compile "io.dropwizard.metrics:metrics-graphite"

    compile('org.springframework.boot:spring-boot-starter-web')
    compileOnly('org.projectlombok:lombok')

//    testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}
